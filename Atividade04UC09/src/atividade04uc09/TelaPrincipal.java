/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package atividade04uc09;

import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.MaskFormatter;

/**
 *
 * @author User
 */
public final class TelaPrincipal extends javax.swing.JFrame {

    
    public TelaPrincipal(){
        initComponents();
        ler("medicoes.txt", jTable1);
        try{
        geraAcessbilidade();
        MaskFormatter mascaraData = new MaskFormatter("##/##/####");
        mascaraData.install(DataField);
        MaskFormatter mascaraTelefone = new MaskFormatter("##:##");
        mascaraTelefone.install(HoraField);
        }catch(ParseException p){
            
        }
        ler("medicoes.txt", jTable1);
    }

    public void geraAcessbilidade() {

        //DEFINE MÉTODO QUE ASSOCIA TECLA DE ATALHO "ATL + D" PARA O BOTÃO
        jButton1.setMnemonic(KeyEvent.VK_D);
    }
    public boolean validarNumero(JFormattedTextField campo) {
    String texto = campo.getText().replaceAll("[^0-9]", "");
    try {
        double numero = Double.parseDouble(texto);
        return true;
    } catch (NumberFormatException ex) {
        return false;
    }
}
    
    public boolean verificarCampoVazio(JFormattedTextField campo) {
    String texto = campo.getText().trim();
    return texto.isEmpty();
}
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        PressaoDField = new javax.swing.JFormattedTextField();
        DataField = new javax.swing.JFormattedTextField();
        HoraField = new javax.swing.JFormattedTextField();
        PressaoSField = new javax.swing.JFormattedTextField();
        jCheckBox1 = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLayeredPane1.setBackground(new java.awt.Color(255, 255, 51));
        jLayeredPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Informações de Medição", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("sansserif", 1, 24))); // NOI18N
        jLayeredPane1.setToolTipText("Insira os dados da medição");
        jLayeredPane1.setFont(new java.awt.Font("sansserif", 0, 36)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Cambria", 0, 30)); // NOI18N
        jLabel1.setLabelFor(DataField);
        jLabel1.setText("Data");

        jLabel3.setFont(new java.awt.Font("Cambria", 0, 30)); // NOI18N
        jLabel3.setLabelFor(PressaoSField);
        jLabel3.setText("Pressão Sistólica");

        jLabel4.setFont(new java.awt.Font("Cambria", 0, 30)); // NOI18N
        jLabel4.setLabelFor(HoraField);
        jLabel4.setText("Hora");

        jLabel5.setFont(new java.awt.Font("Cambria", 0, 30)); // NOI18N
        jLabel5.setLabelFor(PressaoDField);
        jLabel5.setText("Pressão Diastólica");

        PressaoDField.setToolTipText("Insira a pressão diastólica");

        DataField.setToolTipText("Insira a data da medição");
        DataField.setNextFocusableComponent(HoraField);

        HoraField.setToolTipText("Insira a hora da medição da pressão");
        HoraField.setNextFocusableComponent(PressaoSField);

        PressaoSField.setToolTipText("Insira a pressão sistólica");
        PressaoSField.setNextFocusableComponent(PressaoDField);
        PressaoSField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PressaoSFieldActionPerformed(evt);
            }
        });

        jCheckBox1.setFont(new java.awt.Font("Cambria", 0, 30)); // NOI18N
        jCheckBox1.setText("Estou em situação de estresse");
        jCheckBox1.setToolTipText("Marque se você estiver em uma situação de estresse");
        jCheckBox1.setMaximumSize(new java.awt.Dimension(408, 36));
        jCheckBox1.setMinimumSize(new java.awt.Dimension(408, 36));
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Cambria", 0, 25)); // NOI18N
        jButton1.setText("Salvar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLayeredPane1.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel5, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(PressaoDField, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(DataField, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(HoraField, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(PressaoSField, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jCheckBox1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jButton1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap(46, Short.MAX_VALUE)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jCheckBox1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jLayeredPane1Layout.createSequentialGroup()
                        .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4))
                        .addGap(32, 32, 32)
                        .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(HoraField, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DataField, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(PressaoSField, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                        .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PressaoDField, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(46, 46, 46))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(DataField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jLayeredPane1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4))
                    .addGroup(jLayeredPane1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(HoraField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(PressaoSField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5))
                    .addComponent(PressaoDField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tabela de medições", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("sansserif", 1, 24))); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                    .addComponent(jLayeredPane1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void PressaoSFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PressaoSFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PressaoSFieldActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ler("medicoes.txt", jTable1);
        if(validarNumero(DataField) && validarNumero(HoraField ) && validarNumero(PressaoSField ) && validarNumero(PressaoDField ) && !verificarCampoVazio(DataField) && !verificarCampoVazio(HoraField) && !verificarCampoVazio(PressaoSField)&& !verificarCampoVazio(PressaoDField)){
        Medicao medicao = new Medicao();
        medicao.setData(DataField.getText());
        medicao.setHora(HoraField.getText());
        medicao.setPressao_d(PressaoSField.getText());
        medicao.setPressao_s(PressaoDField.getText());
        if (jCheckBox1.isSelected()) {
            medicao.setEstresse("Sim");
        } else {
            medicao.setEstresse("Não");
        }

        ListaMedicao.adicionar(medicao);
        gravar(ListaMedicao.listar(), "medicoes.txt");
        ler("medicoes.txt", jTable1); 

        JOptionPane.showMessageDialog(null, "Os dados foram cadastrados com sucesso: \n");

        DataField.setText("");
        HoraField.setText("");
        PressaoSField.setText("");
        PressaoDField.setText("");
        jCheckBox1.setSelected(false); 
        }else{
           JOptionPane.showMessageDialog(null, "Os campos podem ser somente números e não podem estar vazios! "); 
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField DataField;
    private javax.swing.JFormattedTextField HoraField;
    private javax.swing.JFormattedTextField PressaoDField;
    private javax.swing.JFormattedTextField PressaoSField;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

       public static void gravar(List<Medicao> listaMedicao, String nomeArquivo) {
        
        try {
            FileWriter arquivo = new FileWriter(nomeArquivo, true);
            PrintWriter gravador = new PrintWriter(arquivo);
            
            for (Medicao medicao : listaMedicao) {
                gravador.println(medicao.getData() + " " + medicao.getHora() + " " + medicao.getPressao_d() + " " + medicao.getPressao_s() + " " + medicao.getEstresse() + "\n");
            }
            
            gravador.close();
            arquivo.close();
        }
        catch (IOException ex) {
            System.out.println("Erro ao gravar arquivo: " + ex.getMessage());
        }
    }
       
    
    public static void ler(String nomeArquivo, JTable jTable1) {
    ArrayList<Medicao> listaMedicao = new ArrayList<>();

    try {
        FileReader arquivo = new FileReader(nomeArquivo);
        BufferedReader leitor = new BufferedReader(arquivo);

        String linha;
        while ((linha = leitor.readLine()) != null) {
            String[] dados = linha.split(" ");
            if (dados.length == 5) {
                Medicao medicao = new Medicao(dados[0], dados[1], dados[2], dados[3], dados[4]);
                if (!listaMedicao.contains(medicao)) {
                    listaMedicao.add(medicao);
                }
            }
        }

        leitor.close();
        arquivo.close();
    }
    catch (IOException ex) {
        System.out.println("Erro ao ler arquivo: " + ex.getMessage());
    }

    DefaultTableModel modelo = new DefaultTableModel();
    modelo.setColumnIdentifiers(new String[] { "Data", "Hora", "Pressão D", "Pressão S", "Estresse" });

    for (Medicao medicao : listaMedicao) {
        boolean linhaExiste = false;
        int rowCount = modelo.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            Object data = modelo.getValueAt(i, 0);
            Object hora = modelo.getValueAt(i, 1);
            Object pressao_d = modelo.getValueAt(i, 2);
            Object pressao_s = modelo.getValueAt(i, 3);
            Object estresse = modelo.getValueAt(i, 4);
            if (data.equals(medicao.getData()) && hora.equals(medicao.getHora()) && pressao_d.equals(medicao.getPressao_d()) && pressao_s.equals(medicao.getPressao_s()) && estresse.equals(medicao.getEstresse())) {
                linhaExiste = true;
                break;
            }
        }
        if (!linhaExiste) {
            Object[] linhaDados = { medicao.getData(), medicao.getHora(), medicao.getPressao_d(), medicao.getPressao_s(), medicao.getEstresse() };
            modelo.addRow(linhaDados);
        }
    }

    jTable1.setModel(modelo);
}

    
}
